
<!DOCTYPE html>
<html>
<head>
  <script
      src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.0/axios.min.js"
      integrity="sha512-DZqqY3PiOvTP9HkjIWgjO6ouCbq+dxqWoJZ/Q+zPYNHmlnI2dQnbJ5bxAHpAMw+LXRm4D72EIRXzvcHQtE8/VQ=="
      crossorigin="anonymous"
    ></script>
  
    <!-- <script src="/src/SfmcApiHelper.ts"></script> -->
    <title>Library Methods </title>
    <style>header {
      background-color: rgba(36, 120, 230, 0.952);
      padding: 30px;
      text-align: center;
      font-size: 35px;
      color:honeydew;
    }
  </style>
  <header>
    <h2>MC Library</h2>
  </header> <br><br>
    <button type="button" id="btnGetOauthToken" class="btn btn-primary"
    onclick="accessTokenGeneration()"> Get Access Token</button>
   
    <!-- <button type="button" id="senderDomain" class="btn btn-primary"
    onclick="senderDomain()">senderdomain</button> -->
    <br><br>
    <button type="button" id="AppUserInfo" class="btn btn-primary"
    onclick="AppUserInfo()">AppUserInfo</button>
    <br><br>
    <button type="button" id="retrivejourneys" class="btn btn-primary"
    onclick=" retrivejourneys()"> retrivejourneys</button>
    <br><br>
    <button type="button" id="retrivejourneysbyid" class="btn btn-primary"
    onclick="retrivejourneysbyid()"> retriveactivejourneysid</button>
    <br><br>
    <button type="button" id="createSparkpostIntegrationFolder" class="btn btn-primary"
    onclick="retrievingDataExtensionFolderID()">checkandcreateFolder</button>
     <br><br>
    <button type="button" id="retrievingDataExtensionFolderID" class="btn btn-primary"
    onclick="dataFolderCheck()">retrievingDataExtensionFolderID</button>
    <br><br>
     <label for="fname">isSend:</label>
      <input type="text" id="isSend" name="true/false">
     &emsp;&emsp; 
    <button type="button" id="createdataextension" class="btn btn-primary"
    onclick="createDataExtension()">createdataextension</button>
    <br><br>
    <!-- <button type="button" id="createDEwithRetention" class="btn btn-primary"
    onclick="createDEwithRetention()">createDEwithRetention</button>
    <br><br> -->

    <!-- <button type="button" id="insertrow" class="btn btn-primary"
    onclick="insertRow()">insertRow</button>
    <br><br>
    <button type="button" id="retriverows" class="btn btn-primary"
    onclick="retriverows()">retriverows</button>
    <br><br> -->

    <textarea id="demo" cols="100" rows="20"  size="10000"name="json data"></textarea>

    <br><br>
    
</head>
<body>
  <script>
    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    const authorization_code = urlParams.get('code');
    console.log("authorization_code",authorization_code);
    // const tssd = urlParams.get('tssd');
    const tssd = "mcj6cy1x9m-t5h5tz0bfsyqj38ky";
    console.log("tssd=",tssd);
    let apptoken ="";
    let oauthToken="";
    let soap_instance_url="";
    let member_id="";
    let FolderID="";
    let ParentFolderID="";
    let rest_instance_url="";

      function accessTokenGeneration(req,res) {
        axios({
          method: "POST",
          url: "/appdemoauthtoken",
          data: {
            authorization_code:authorization_code,
            tssd: tssd
          },
        })
          .then(function (response) {
            console.log("response>>>>",response);
            var log = response;
            document.getElementById("demo").value=JSON.stringify(log)
            this.oauthToken=response.data.oauthToken
            this.soap_instance_url=response.data.soap_instance_url,
            this.rest_instance_url=response.data.rest_instance_url
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      function AppUserInfo()
       {
         axios({
           method: "POST",
           url: "/appuserInfo",
           data: { oauthToken : this.oauthToken},
 
         })
           .then(function (response) {
             console.log("response in userInfo>>>>",response);
             this.member_id=response.data.member_id
             var log = response;
             document.getElementById("demo").value=JSON.stringify(log)
           })
           .catch(function(err)
           {
             console.log(err)
           })      
        }
                
      function retrivejourneys(){
       
        axios({
          method: "GET",
          url: "/getactivejourneys",
          params:{oauthToken : this.oauthToken},
        })
          .then(function (response) {
           console.log("Active Journeys:",response)
           var log = response;
           document.getElementById("demo").value=JSON.stringify(log)
          })
          .catch(function (error) {
            console.error(error)
          });
        
      }


      function retrivejourneysbyid()
      {
       axios({
       method: "POST",
       url: "/getJourneysById",
       params: {
         oauthToken : this.oauthToken      
  },
})
  .then(function (response) {
  console.log("Retrieve Journey By ID:",response)
  var log = response;
  document.getElementById("demo").value=JSON.stringify(log)
  })
  .catch(function (error) {
    console.log(error)
  });
 }
 
 
 function retrievingDataExtensionFolderID()
  {
  axios({
    method: "POST",
    url: "/retrievingdataextensionfolderid",
    data: {
      tssd: this.tssd,
      member_id: this.member_id,
      soap_instance_url: this.soap_instance_url,
      oauthToken:this.oauthToken
    },
  })
    .then(function (response) {
        console.log( "retrievingdataextensionfolderid:" + JSON.stringify(response.data));
        this.ParentFolderID=response.data.ParentFolderID
        createFolder(); 
    })
    .catch(function (error) {
      console.log(error);
    });
}

// creating Sparkpost Integration Data folder
function createFolder()
 {
  axios({
    method: "POST",
    url: "/createfolder",
    data: {
      oauthToken :this.oauthToken,
      member_id: this.member_id,
      soap_instance_url: this.soap_instance_url,
      ParentFolderID: this.ParentFolderID,
    },
  })
    .then(function (response) {
      console.log(
        "createFolder:" +
          JSON.stringify(response.data)
      );
      var log = response;
      document.getElementById("demo").value=JSON.stringify(log)
    })
    .catch(function (error) {
      console.log(error);
    });
}

      function insertRow(rowData, thisdata) {
        console.log("memberid:" + thisdata.state.member_id);
        console.log("refreshToken:" + thisdata.state.refreshtoken);
        console.log("restInstance:" + thisdata.state.restInstance);
        console.log("soapInstance:" + thisdata.state.soapInstance);
        console.log(
          "De external KEY " + thisdata.state.DEexternalKeyDomainConfiguration
        );
        const userInfobody = {
          tssd: thisdata.state.tssd,
          memberid: thisdata.state.member_id,
          restInstance: thisdata.state.restInstance,
          soapInstance: thisdata.state.soapInstance,
          DEexternalKeyDomainConfiguration:
            thisdata.state.DEexternalKeyDomainConfiguration,
        };
        const data = {
          domainConfigurationData: rowData,
          userInfobody: userInfobody,
          refreshToken: thisdata.state.refreshtoken,
        };
        axios({
          method: "POST",
          url: "/insertrow",
          data: data,
          headers: { "Content-Type": "application/json" },
        })
          .then(function (response) {
            console.log(
              "loadDataForDomainConfiguration:" + JSON.stringify(response.data)
            );
            thisdata.setState({ refreshtoken: response.data.refreshToken });
          })
          .catch(function (error) {
            console.log(error);
          });
      }
      /*function retrievingDataExtensionFolderID(
        thisdata,
        refreshToken,
        soapInstance,
        memberid
      ) {
        axios({
          method: "POST",
          url: "/retrievingdataextensionfolderid",
          data: {
            refreshToken: refreshToken,
            tssd: thisdata.state.tssd,
            memberid: memberid,
            soapInstance: soapInstance,
          },
        })
          .then(function (response) {
            if (response.data.statusText) {
              console.log(
                "retrievingdataextensionfolderid:" + JSON.stringify(response.data)
              );
              thisdata.setState({ refreshtoken: response.data.refreshToken });
              createSparkpostIntegrationFolder(
                thisdata,
                response.data.refreshToken,
                response.data.soap_instance_url,
                response.data.member_id,
                response.data.ParentFolderID
              );
            } else {
              console.log("Error getting Data extension's folder ID");
            }
          })
          .catch(function (error) {
            console.log(error);
          });
      }*/
    
      function dataFolderCheck() {
        axios({
          method: "POST",
          url: "/datafoldercheck",
          data: {
           // refreshToken: refreshToken,
            //tssd: thisdata.state.tssd,
            oauthToken:this.oauthToken,
            soap_instance_url: this.soap_instance_url,
            member_id : this.member_id
          },
        })
          .then(function (response) {
            console.log("datafolder:" + JSON.stringify(response.data));
            this.member_id=response.data.member_id;
            this.FolderID=response.data.FolderID;
            var log = response;
            document.getElementById("demo").value=JSON.stringify(log)
          })
          .catch(function (error) {
            console.log(error);
          });
      }


      function createDataExtension()
       {
         let isSend=document.getElementById("isSend").value
         console.log("isSend:",isSend)
       axios({
    method: "POST",
    url: "/createDataExtension",
    data: {
      oauthToken:this.oauthToken,
      memberid:this.memberid,
      soap_instance_url:this.soap_instance_url,
      FolderID:this.FolderID,
      isSend:isSend
      
    },
  })
    .then(function (response) {
      console.log(
        "createDataExtensioFolder:" + JSON.stringify(response.data)
        
      );
      var log = response;
            document.getElementById("demo").value=JSON.stringify(log)
      
    })
    .catch(function (error) {
      console.log(error);
    });
} 

function createDEwithRetention()
  {
       axios({
    method: "POST",
    url: "/createDEwithRetention",
    data: {
      oauthToken:this.oauthToken,
      memberid:this.memberid,
      soap_instance_url:this.soap_instance_url,
      FolderID:this.FolderID,
      
    },
  })
    .then(function (response) {
      console.log(
        "createDEwithRetention:" + JSON.stringify(response.data) 
      );
      var log = response;
            document.getElementById("demo").value=JSON.stringify(log)
      
    })
    .catch(function (error) {
      console.log(error);
    });
} 
     
   function creatingDomainConfigurationDE(req,res)
 
  {
    var dataextensionname = document.getElementById("txt").value;
    console.log("dataextensionname=",dataextensionname);
   //  console.log("methodcalled");
        axios({
          method: "POST",
          url: "/creatingDomainConfigurationDE",
          data: {
            oauthToken:this.oauthToken,
            memberid:this.memberid,
            soap_instance_url:this.soap_instance_url,
            FolderID:this.FolderID,
          },
         
        })
          .then(function (response) {
            console.log(
              "creatingDomainConfigurationDE:" + JSON.stringify(response)
            );
           
            
          })
          .catch(function (error) {
           document.getElementById("demo3").innerHTML = "dataextension not created";
            console.log(error);
          });
      }
      
    

function domainConfigurationDECheck(
  thisdata,
  refreshToken,
  soapInstance,
  memberid,
  FolderID
) {
  axios({
    method: "POST",
    url: "/dataextensioncheck",
    data: {
      refreshToken: refreshToken,
      tssd: thisdata.state.tssd,
      memberid: memberid,
      soapInstance: soapInstance,
      FolderID: FolderID,
    },
  })
    .then(function (response) {
      console.log("domainConfigurationDECheck:" + JSON.stringify(response));
      if (response.data) {
        thisdata.setState({ refreshtoken: response.data.refreshToken });
        thisdata.setState({
          DEexternalKeyDomainConfiguration:
            response.data.DEexternalKeyDomainConfiguration,
        });
      } else {
        console.log("Error creating data extension folder");
      }
    })
    .catch(function (error) {
      console.log(error);
    });
}

function retriverows()
{
  const domainvalue = {
    refreshToken: this.state.refreshtoken,
    tssd: this.state.tssd,
    memberid: this.state.member_id,
    restInstance: this.state.restInstance,
    soapInstance: this.state.soapInstance,
    FolderID: this.state.FolderID,
  };
  axios({
    method: "POST",
    url: "/retrievingDataExtensionRows",
    data: domainvalue,
  })
    .then(function (response) {
      /**
       * Response manupulation operations code
       */
    })
    .catch(function (error) {
      /**
       * Error handling code.
       */
    });
  
}      
        
</script>
</body>
</html>
   
